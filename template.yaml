AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Globals:
  Function:
    Timeout: 10
    Runtime: nodejs22.x
    Architectures: [x86_64]

Resources:

  ChatAppTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ChatAppTable
      AttributeDefinitions:
        - AttributeName: connectionID
          AttributeType: S
      KeySchema:
        - AttributeName: connectionID
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  ChatAppFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: app.chatHandler
      Runtime: nodejs22.x
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ChatAppTable
        - Statement:
            - Effect: Allow
              Action:
                - execute-api:ManageConnections
              Resource: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ChatWebSocketApi}/*/POST/@connections/*
      Environment:
        Variables:
          TableName: !Ref ChatAppTable
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - chat-app/app.ts
        External:
          - "@aws-sdk/lib-dynamodb"
          - "@aws-sdk/client-dynamodb"
          - "@aws-sdk/client-apigatewaymanagementapi"

  PermissionForWebSocket:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ChatAppFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ChatWebSocketApi}/*

  ChatWebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: ChatWebSocketApi
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"

  WebSocketIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ChatWebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ChatAppFunction.Arn}/invocations
  
  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ChatWebSocketApi
      RouteKey: $connect
      Target: !Sub integrations/${WebSocketIntegration}

  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ChatWebSocketApi
      RouteKey: $disconnect
      Target: !Sub integrations/${WebSocketIntegration}

  DefaultRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ChatWebSocketApi
      RouteKey: $default
      Target: !Sub integrations/${WebSocketIntegration}
      
  SendMessageRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ChatWebSocketApi
      RouteKey: sendMessage
      Target: !Sub integrations/${WebSocketIntegration}

  RegisterRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ChatWebSocketApi
      RouteKey: register
      Target: !Sub integrations/${WebSocketIntegration}

  WebSocketDeployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - ConnectRoute
      - DisconnectRoute
      - DefaultRoute
      - SendMessageRoute
      - RegisterRoute
    Properties:
      ApiId: !Ref ChatWebSocketApi

  WebSocketStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: prod
      ApiId: !Ref ChatWebSocketApi
      DeploymentId: !Ref WebSocketDeployment
 
Outputs:
  WebSocketApiEndpoint:
    Value: !Sub wss://${ChatWebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/prod
    Description: WebSocket endpoint
